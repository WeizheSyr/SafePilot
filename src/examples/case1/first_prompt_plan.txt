You are a motion planner who want to use Z3 to verify your plan. When I ask you to write me the code, please give me the full code.
Now we consider the block workld planning problem. 
The objects in the problem domain include a finite number of cubical blocks, and a table large enough to hold all of them. Each block is on a single other object (either another block or the table). For each block b, either b is clear or else there is a unique block a sitting on b. There is one kind of action: move a single clear block, either from another block onto the table, or from an object onto another clear block. As a result of moving b from c onto d, b is sitting on d instead of c, c is clear (unless it is the table), and d is not clear (unless it is the table).
A problem in this domain is specified by giving two sets of ground atoms, one specifying an initial state of the world, and the other specifying necessary and sufficient conditions for a state to be a goal state. A solution to this problem is a plan capable of transforming the initial state into a state satisfying the goal conditions.
In the plan you provided, you can only use four operations instead of the action move a single clear block: pick_up, put_down, stack, unstack. I'll give the details of these operations later.
Here are the details of these operations. 

Pick_up:
The block must be clear and on the table in state s1. The block must not be in the hand in state s1. The block must be in the hand in state s2. The block must not be on the table in state s2 and must not be clear.
For all other blocks x, the state of the hand, table, and clear should remain the same between s1 and s2.
For all blocks x, y, the state of the stacked should remain the same between s1 and s2.

Put_down:
The block must be in the hand in state s1. The block must not be on the table in state s1. The block must not be in the hand in state s2. The block must be on the table in state s2 and must be clear.
For all other blocks x, the  state of the hand, table, and clear should remain the same between s1 and s2.
For all blocks x, y, the state of the stacked should remain the same between s1 and s2.

Stack:
In all cases, the following should be true when executing the stack(block1, block2) operation.: For all other blocks x other than these two blocks, the state of the hand, table, and clear should remain the same between the states s1 and s2. For all blocks x, y, where neither x is block1, nor y is block2, the state of being stacked should remain the same between s1 and s2.
There are two cases: either a block is stacked from the table or a block is stacked from the hand.
If the block1 is being stacked from the table, then the following is true: The block1 must be on the table in state s1. Neither block1 nor block2 should be stacked on each other in state s1. Both block1 and block2 must be clear, i.e., not having andy block on them, in state s1. The agent's hand should be free in state s1. The block1 must not be in the agent's hand nor on the table in state s2. The block1 must be stacked on block2 in state s2. The block1 must be clear, while block2 must not be clear in state s2. The agen's hand should be free in state s2.

Unstack:
In all cases, the following should be true when executing the unstack(block1, block2) operation. For all other blocks x other than these two blocks, the state of the hand, table, and clear should remain the same between the states s1 and s2. For all blocks x and y, where neither x is block1, nor y is block2, the state of being stacked should stay the same between s1 and s2.
There are two cases: either a block is unstacked to the table or a block is unstacked to the hand.
If the block1 is being unstacked from the block2 to the table, then the following must be true: The blocks block1 and block2 must be stacked in state s1, with block1 clear and the agent's hand free. In state s2, block1 should not be stacked on block2 but should be on the table. In state 2, both block1 and block2 should be clear, and the agent's hand should be free.
If the block1 is being unstacked from the block2 to the hand, then the following must be true: The blocks block1 and block2 must be stacked in state s1, with block1 clear and the agent's hand free. In state s2, block1 should not be stacked on block2 but should be in the agent's hand. The block2 should be clear, but block1 should not be clear, and the agent's hand should not be free.


Here is an example of the problem and the correct result.
Given the block world problem OLDPROB1:

(define (problem BW-sample-0)
(:domain blocksworld-4ops)
(:objects b1 b2 b3 b4 b5 b6 )
(:init
(arm-empty)
(on b1 b2)
(on b2 b3)
(on b3 b4)
(on b4 b5)
(on b5 b6)
(on-table b6)
(clear b1)
)
(:goal
(and
(on b6 b5)
(on b5 b4)
(on b4 b3)
(on b3 b2)
(on b2 b1)
(on-table b1)
)))


The solution for the problem OLDPROB1 is:
START-PLAN
1. unstack b1 b2
2. put-down b1
3. unstack b2 b3
4. put-down b2
5. unstack b3 b4
6. put-down b3
7. unstack b4 b5
8. put-down b4
9. unstack b5 b6
10. put-down b5
11. pick-up b6
12. stack b6 b5
13. pick-up b5
14. stack b5 b4
15. pick-up b4
16. stack b4 b3
17. pick-up b3
18. stack b3 b2
19. pick-up b2
20. stack b2 b1
END-PLAN


Now please give me the result of the new block world problem below, the solution's format should be the same as the example solution:

(define (problem BW-rand-6)
(:domain blocksworld-4ops)
(:objects b1 b2 b3 b4 b5 b6 )
(:init
(arm-empty)
(on b1 b6)
(on b2 b3)
(on-table b3)
(on b4 b1)
(on-table b5)
(on-table b6)
(clear b2)
(clear b4)
(clear b5)
)
(:goal
(and
(on b1 b2)
(on b5 b3)
(on b6 b4))
)
)
